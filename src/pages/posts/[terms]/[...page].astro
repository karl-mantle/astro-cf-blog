---
import type { GetStaticPathsOptions, GetStaticPathsResult, Page } from "astro";
import type { CollectionEntry } from "astro:content";
import { getTerms, getEntriesByTag, getEntriesByCategory } from "~/utils/collections";
import Base from "~/layouts/Base.astro";
import PostArchive from "~/components/collections/PostArchive.astro";

type Terms = {
  count?: number;
  name: string;
  slug: string;
  type?: string;
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const terms: Terms[] = await getTerms("posts");
  let paths: GetStaticPathsResult = [];

  for (const term of terms) {
    const { name, slug, type } = term;

    let entries;
    switch (type) {
      case "category":
        entries = await getEntriesByCategory("posts", name);
        break;
      case "tag":
        entries = await getEntriesByTag("posts", name);
        break;
      default:
        entries = await getEntriesByCategory("posts", name);
    }

    const paginatedTerms = paginate(entries, {
      params: { terms: `${type}/${slug}` },
      pageSize: 7,
    });

    paginatedTerms.forEach((path) => {
      path.props = { ...path.props, term };
    });

    paths = paths.concat(paginatedTerms);
  }

  return paths;
}

const { page, term } = Astro.props as { page: Page<CollectionEntry<"posts">>; term: Terms };

const entryCount = page.end + 1;
---

<Base
  title={term.type === "category"
    ? `“${term.name}” category archive`
    : `“${term.name}” tag archive`}
  description={term.type === "category"
    ? `View all entries on this blog in the category “${term.name}”.`
    : `View all entries on this blog tagged with “${term.name}”.`}
>
  <PostArchive
    description={`Now displaying ${entryCount} of ${page.total} posts.`}
    heading={term.type === "category"
      ? `All posts categorised as “${term.name}”`
      : `All posts tagged with “${term.name}”`}
    page={page}
  />
</Base>
