---
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import { getTableOfContents } from "~/utils/collections";
import TableOfContentsHeading from "~/components/ui/TableOfContentsHeading.astro";

const { headings } = Astro.props as { headings: MarkdownHeading[] };

const toc = getTableOfContents(headings);
---

<aside class="sticky top-0">
  <nav
    id="toc"
    class="bg-mikado-100 pointer-events-none fixed inset-0 m-4 flex hidden h-fit w-full max-w-[calc(100vw-2rem)] flex-col gap-2 overflow-y-auto p-4 transition duration-300 md:absolute md:-right-72 md:left-auto md:m-0 md:h-[calc(100vh-3rem)] md:max-w-56 md:bg-transparent"
    aria-hidden="true"
  >
    <div class="border-mikado-500 mb-2 w-fit border-b pb-1 text-lg">Table of contents:</div>
    <ul>
      {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
    </ul>
    <button
      id="toc-close-btn"
      class="xl:hover:border-mikado-950 focus-visible:bg-mikado-300 flex cursor-pointer items-center justify-center gap-2 border-b border-transparent p-2 text-sm transition duration-300 focus:border-b-2 focus-visible:border-black focus-visible:text-black xl:mx-auto xl:w-fit"
      aria-label="close table of contents"
      aria-pressed="false"
    >
      <Icon name="ri:close-line" height={24} width={24} />
      <span>Close</span>
    </button>
  </nav>
</aside>

<script>
  // @ts-nocheck
  function initToc() {
    const toc = document.getElementById("toc");
    const btnWrapper = document.getElementById("toc-btn-wrapper");
    const toggleBtn = document.getElementById("toc-toggle-btn");
    const closeBtn = document.getElementById("toc-close-btn");

    // maybe this should be global, so toc persists between different posts?
    let tocOpen = false;

    // TODO: add focus trap from search, perhaps a shared module??

    function updateToc() {
      if (tocOpen) {
        toc?.classList.remove("opacity-0", "hidden", "pointer-events-none");
        toc?.removeAttribute("inert");
        toc?.setAttribute("aria-hidden", "false");
        btnWrapper?.classList.add("opacity-0", "hidden", "pointer-events-none");
        toggleBtn?.setAttribute("aria-pressed", "true");
        toggleBtn?.setAttribute("inert", "");
      } else {
        toc?.classList.add("opacity-0", "hidden", "pointer-events-none");
        toc?.setAttribute("inert", "");
        toc?.setAttribute("aria-hidden", "true");
        btnWrapper?.classList.remove("opacity-0", "hidden", "pointer-events-none");
        toggleBtn?.setAttribute("aria-pressed", "false");
        toggleBtn?.removeAttribute("inert");
      }
    }

    updateToc();

    toggleBtn?.addEventListener("click", () => {
      tocOpen = !tocOpen;
      updateToc();
    });

    closeBtn?.addEventListener("click", () => {
      tocOpen = false;
      updateToc();
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        tocOpen = false;
        updateToc();
      }
    });

    toc?.addEventListener("focusin", () => {
      if (!tocOpen) {
        tocOpen = true;
        updateToc();
      }
    });
  }
  document.addEventListener("DOMContentLoaded", initToc);
  document.addEventListener("astro:after-swap", initToc);
</script>
